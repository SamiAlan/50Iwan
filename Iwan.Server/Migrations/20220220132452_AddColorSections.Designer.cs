// <auto-generated />
using System;
using Iwan.Server.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Iwan.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220220132452_AddColorSections")]
    partial class AddColorSections
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Iwan.Server.Domain.Catelog.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ColorCode")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<int>("ColorTypeId")
                        .HasColumnType("int");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("HasRelatedProducts")
                        .HasColumnType("bit");

                    b.Property<bool>("HasSubCategories")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSubCategory")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("ParentCategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("Iwan.Server.Domain.Catelog.CategoryImage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BackgroundlessCroppedImageId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BackgroundlessMediumImageId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BackgroundlessMobileImageId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BackgroundlessThumbnailImageId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BackgroundlessCroppedImageId");

                    b.HasIndex("BackgroundlessMediumImageId");

                    b.HasIndex("BackgroundlessMobileImageId");

                    b.HasIndex("BackgroundlessThumbnailImageId");

                    b.HasIndex("CategoryId")
                        .IsUnique()
                        .HasFilter("[CategoryId] IS NOT NULL");

                    b.ToTable("CategoryImages", (string)null);
                });

            modelBuilder.Entity("Iwan.Server.Domain.Common.Address", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address1")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Address2")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("City")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Company")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Country")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Email")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.ToTable("Addresses", (string)null);
                });

            modelBuilder.Entity("Iwan.Server.Domain.Compositions.Composition", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ArabicDescription")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ColorCode")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<int>("ColorTypeId")
                        .HasColumnType("int");

                    b.Property<string>("EnglishDescription")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Compositions", (string)null);
                });

            modelBuilder.Entity("Iwan.Server.Domain.Compositions.CompositionImage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BackgroundlessCroppedImageId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BackgroundlessMediumImageId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BackgroundlessMobileImageId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BackgroundlessThumbnailImageId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompositionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BackgroundlessCroppedImageId");

                    b.HasIndex("BackgroundlessMediumImageId");

                    b.HasIndex("BackgroundlessMobileImageId");

                    b.HasIndex("BackgroundlessThumbnailImageId");

                    b.HasIndex("CompositionId")
                        .IsUnique();

                    b.ToTable("CompositionImages", (string)null);
                });

            modelBuilder.Entity("Iwan.Server.Domain.Jobs.JobDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("JobId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JobStatusId")
                        .HasColumnType("int");

                    b.Property<int>("JobTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("JobDetails", (string)null);
                });

            modelBuilder.Entity("Iwan.Server.Domain.Media.Image", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsWatermarked")
                        .HasColumnType("bit");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("VirtualPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Images", (string)null);
                });

            modelBuilder.Entity("Iwan.Server.Domain.Media.TempImage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("SmallVersionFileName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("VirtualPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TempImages", (string)null);
                });

            modelBuilder.Entity("Iwan.Server.Domain.Pages.AboutUsSection", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ArabicText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AboutUsSections", (string)null);
                });

            modelBuilder.Entity("Iwan.Server.Domain.Pages.AboutUsSectionImage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AboutUsSectionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CroppedImageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MediumImageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MobileImageId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AboutUsSectionId");

                    b.HasIndex("CroppedImageId");

                    b.HasIndex("MediumImageId");

                    b.HasIndex("MobileImageId");

                    b.ToTable("AboutUsSectionImages", (string)null);
                });

            modelBuilder.Entity("Iwan.Server.Domain.Pages.Color", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ColorCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SectionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.ToTable("Colors", (string)null);
                });

            modelBuilder.Entity("Iwan.Server.Domain.Pages.ColorPickingSection", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("ColorPickingSections", (string)null);
                });

            modelBuilder.Entity("Iwan.Server.Domain.Pages.ContactUsSection", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacebookUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstagramUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContactUsSections", (string)null);
                });

            modelBuilder.Entity("Iwan.Server.Domain.Pages.HeaderSection", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ArabicSubtitle1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicSubtitle2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishSubtitle1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishSubtitle2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HeaderSections", (string)null);
                });

            modelBuilder.Entity("Iwan.Server.Domain.Pages.InteriorDesignSection", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ArabicText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("InteriorDesignSections", (string)null);
                });

            modelBuilder.Entity("Iwan.Server.Domain.Pages.InteriorDesignSectionImage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InteriorDesignSectionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MainImageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MobileImageId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("InteriorDesignSectionId")
                        .IsUnique();

                    b.HasIndex("MainImageId");

                    b.HasIndex("MobileImageId");

                    b.ToTable("InteriorDesignSectionImages", (string)null);
                });

            modelBuilder.Entity("Iwan.Server.Domain.Pages.ServicesSection", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Service1ArabicText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Service1ArabicTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Service1EnglishText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Service1EnglishTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Service2ArabicText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Service2ArabicTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Service2EnglishText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Service2EnglishTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServicesSections", (string)null);
                });

            modelBuilder.Entity("Iwan.Server.Domain.Products.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ArabicDescription")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ColorCode")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<int>("ColorTypeId")
                        .HasColumnType("int");

                    b.Property<string>("DimensionsInArabic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DimensionsInEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishDescription")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("MakerArabicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MakerEnglishName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<string>("VendorId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("VendorId");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("Iwan.Server.Domain.Products.ProductCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCategories", (string)null);
                });

            modelBuilder.Entity("Iwan.Server.Domain.Products.ProductImage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CroppedImageId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MediumImageId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MobileImageId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SmallImageId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ThumbnailImageId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CroppedImageId");

                    b.HasIndex("MediumImageId");

                    b.HasIndex("MobileImageId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SmallImageId");

                    b.HasIndex("ThumbnailImageId");

                    b.ToTable("ProductImages", (string)null);
                });

            modelBuilder.Entity("Iwan.Server.Domain.Products.ProductMainImage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BackgroundlessCroppedImageId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BackgroundlessMediumImageId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BackgroundlessMobileImageId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BackgroundlessSmallImageId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BackgroundlessThumbnailImageId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BackgroundlessCroppedImageId");

                    b.HasIndex("BackgroundlessMediumImageId");

                    b.HasIndex("BackgroundlessMobileImageId");

                    b.HasIndex("BackgroundlessSmallImageId");

                    b.HasIndex("BackgroundlessThumbnailImageId");

                    b.HasIndex("ProductId")
                        .IsUnique()
                        .HasFilter("[ProductId] IS NOT NULL");

                    b.ToTable("ProductMainImages", (string)null);
                });

            modelBuilder.Entity("Iwan.Server.Domain.Products.ProductState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("EnglishName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductStates", (string)null);
                });

            modelBuilder.Entity("Iwan.Server.Domain.Sales.Bill", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("CustomerPhone")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.Property<DateTime>("UpdatedDateUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Bills", (string)null);
                });

            modelBuilder.Entity("Iwan.Server.Domain.Sales.BillItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("BenefitPercentFromVendor")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("BillId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.HasIndex("ProductId");

                    b.ToTable("BillItems", (string)null);
                });

            modelBuilder.Entity("Iwan.Server.Domain.Security.RefreshToken", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Invalidated")
                        .HasColumnType("bit");

                    b.Property<string>("Jid")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("Used")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("Iwan.Server.Domain.Settings.AboutUsSectionImagesSettings", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MediumImageHeight")
                        .HasColumnType("int");

                    b.Property<int>("MediumImageWidth")
                        .HasColumnType("int");

                    b.Property<int>("MobileImageHeight")
                        .HasColumnType("int");

                    b.Property<int>("MobileImageWidth")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AboutUsSectionImagesSettings", (string)null);
                });

            modelBuilder.Entity("Iwan.Server.Domain.Settings.CategoriesImagesSettings", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MediumImageHeight")
                        .HasColumnType("int");

                    b.Property<int>("MediumImageWidth")
                        .HasColumnType("int");

                    b.Property<int>("MobileImageHeight")
                        .HasColumnType("int");

                    b.Property<int>("MobileImageWidth")
                        .HasColumnType("int");

                    b.Property<int>("ThumbnailImageHeight")
                        .HasColumnType("int");

                    b.Property<int>("ThumbnailImageWidth")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CategoriesImagesSettings", (string)null);
                });

            modelBuilder.Entity("Iwan.Server.Domain.Settings.CompositionsImagesSettings", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MediumImageHeight")
                        .HasColumnType("int");

                    b.Property<int>("MediumImageWidth")
                        .HasColumnType("int");

                    b.Property<int>("MobileImageHeight")
                        .HasColumnType("int");

                    b.Property<int>("MobileImageWidth")
                        .HasColumnType("int");

                    b.Property<int>("ThumbnailImageHeight")
                        .HasColumnType("int");

                    b.Property<int>("ThumbnailImageWidth")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CompositionsImagesSettings", (string)null);
                });

            modelBuilder.Entity("Iwan.Server.Domain.Settings.MailSettings", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReportRecepientEmail")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("MailSettings", (string)null);
                });

            modelBuilder.Entity("Iwan.Server.Domain.Settings.ProductsImagesSettings", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MediumImageHeight")
                        .HasColumnType("int");

                    b.Property<int>("MediumImageWidth")
                        .HasColumnType("int");

                    b.Property<int>("MobileImageHeight")
                        .HasColumnType("int");

                    b.Property<int>("MobileImageWidth")
                        .HasColumnType("int");

                    b.Property<int>("SmallImageHeight")
                        .HasColumnType("int");

                    b.Property<int>("SmallImageWidth")
                        .HasColumnType("int");

                    b.Property<int>("ThumbnailImageHeight")
                        .HasColumnType("int");

                    b.Property<int>("ThumbnailImageWidth")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ProductsImagesSettings", (string)null);
                });

            modelBuilder.Entity("Iwan.Server.Domain.Settings.SlidersImagesSettings", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MediumImageHeight")
                        .HasColumnType("int");

                    b.Property<int>("MediumImageWidth")
                        .HasColumnType("int");

                    b.Property<int>("MobileImageHeight")
                        .HasColumnType("int");

                    b.Property<int>("MobileImageWidth")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SlidersImagesSettings", (string)null);
                });

            modelBuilder.Entity("Iwan.Server.Domain.Settings.TempImagesSettings", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DelayInMinutes")
                        .HasColumnType("int");

                    b.Property<int>("TempImagesExpirationDays")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TempImagesBackgroundServiceSettings", (string)null);
                });

            modelBuilder.Entity("Iwan.Server.Domain.Settings.WatermarkSettings", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Opacity")
                        .HasColumnType("real");

                    b.Property<bool>("ShouldAddWatermark")
                        .HasColumnType("bit");

                    b.Property<string>("WatermarkImageId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("WatermarkImageId");

                    b.ToTable("WatermarkSettings", (string)null);
                });

            modelBuilder.Entity("Iwan.Server.Domain.Sliders.SliderImage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CroppedImageId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MediumImageId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MobileImageId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CroppedImageId");

                    b.HasIndex("MediumImageId");

                    b.HasIndex("MobileImageId");

                    b.ToTable("SliderImages", (string)null);
                });

            modelBuilder.Entity("Iwan.Server.Domain.Users.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "4b6a5d5d-8f59-4891-8a43-a2494264f32e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d8bce6eb-4d4d-4d30-a0d3-fdee31461200",
                            Email = "superadmin@aleman-museum.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Admin",
                            NormalizedEmail = "SUPERADMIN@ALEMAN-MUSEUM.COM",
                            NormalizedUserName = "SUPERADMIN@ALEMAN-MUSEUM.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKPHktxzO32DL4+5Gj5w8fiR6gPVzswn9/IGoLSA72YCSEELxArUbVmvcQSMnR4gZw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "acb2e550-8485-4eb7-9543-93aaed975bea",
                            TwoFactorEnabled = false,
                            UserName = "admin5245"
                        });
                });

            modelBuilder.Entity("Iwan.Server.Domain.Vendors.Vendor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("BenefitPercent")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("ShowOwnProducts")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Vendors", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a6afb5d1-5641-4ea2-aa39-e497aab01445",
                            ConcurrencyStamp = "c6bfb068-23ad-4bd9-8844-57098fb94521",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "a75eb0b6-0c46-401a-aa85-386e06a3d083",
                            ConcurrencyStamp = "bc669139-3060-409c-a9c1-3876c8848171",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "4b6a5d5d-8f59-4891-8a43-a2494264f32e",
                            RoleId = "a75eb0b6-0c46-401a-aa85-386e06a3d083"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Iwan.Server.Domain.Catelog.Category", b =>
                {
                    b.HasOne("Iwan.Server.Domain.Catelog.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Iwan.Server.Domain.Catelog.CategoryImage", b =>
                {
                    b.HasOne("Iwan.Server.Domain.Media.Image", "BackgroundlessCroppedImage")
                        .WithMany()
                        .HasForeignKey("BackgroundlessCroppedImageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Iwan.Server.Domain.Media.Image", "BackgroundlessMediumImage")
                        .WithMany()
                        .HasForeignKey("BackgroundlessMediumImageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Iwan.Server.Domain.Media.Image", "BackgroundlessMobileImage")
                        .WithMany()
                        .HasForeignKey("BackgroundlessMobileImageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Iwan.Server.Domain.Media.Image", "BackgroundlessThumbnailImage")
                        .WithMany()
                        .HasForeignKey("BackgroundlessThumbnailImageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Iwan.Server.Domain.Catelog.Category", "Category")
                        .WithOne("Image")
                        .HasForeignKey("Iwan.Server.Domain.Catelog.CategoryImage", "CategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("BackgroundlessCroppedImage");

                    b.Navigation("BackgroundlessMediumImage");

                    b.Navigation("BackgroundlessMobileImage");

                    b.Navigation("BackgroundlessThumbnailImage");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Iwan.Server.Domain.Compositions.CompositionImage", b =>
                {
                    b.HasOne("Iwan.Server.Domain.Media.Image", "BackgroundlessCroppedImage")
                        .WithMany()
                        .HasForeignKey("BackgroundlessCroppedImageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Iwan.Server.Domain.Media.Image", "BackgroundlessMediumImage")
                        .WithMany()
                        .HasForeignKey("BackgroundlessMediumImageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Iwan.Server.Domain.Media.Image", "BackgroundlessMobileImage")
                        .WithMany()
                        .HasForeignKey("BackgroundlessMobileImageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Iwan.Server.Domain.Media.Image", "BackgroundlessThumbnailImage")
                        .WithMany()
                        .HasForeignKey("BackgroundlessThumbnailImageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Iwan.Server.Domain.Compositions.Composition", "Composition")
                        .WithOne("Image")
                        .HasForeignKey("Iwan.Server.Domain.Compositions.CompositionImage", "CompositionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BackgroundlessCroppedImage");

                    b.Navigation("BackgroundlessMediumImage");

                    b.Navigation("BackgroundlessMobileImage");

                    b.Navigation("BackgroundlessThumbnailImage");

                    b.Navigation("Composition");
                });

            modelBuilder.Entity("Iwan.Server.Domain.Pages.AboutUsSectionImage", b =>
                {
                    b.HasOne("Iwan.Server.Domain.Pages.AboutUsSection", "AboutUsSection")
                        .WithMany("Images")
                        .HasForeignKey("AboutUsSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Iwan.Server.Domain.Media.Image", "CroppedImage")
                        .WithMany()
                        .HasForeignKey("CroppedImageId");

                    b.HasOne("Iwan.Server.Domain.Media.Image", "MediumImage")
                        .WithMany()
                        .HasForeignKey("MediumImageId");

                    b.HasOne("Iwan.Server.Domain.Media.Image", "MobileImage")
                        .WithMany()
                        .HasForeignKey("MobileImageId");

                    b.Navigation("AboutUsSection");

                    b.Navigation("CroppedImage");

                    b.Navigation("MediumImage");

                    b.Navigation("MobileImage");
                });

            modelBuilder.Entity("Iwan.Server.Domain.Pages.Color", b =>
                {
                    b.HasOne("Iwan.Server.Domain.Pages.ColorPickingSection", "Section")
                        .WithMany("Colors")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Iwan.Server.Domain.Pages.InteriorDesignSectionImage", b =>
                {
                    b.HasOne("Iwan.Server.Domain.Pages.InteriorDesignSection", "InteriorDesignSection")
                        .WithOne("Image")
                        .HasForeignKey("Iwan.Server.Domain.Pages.InteriorDesignSectionImage", "InteriorDesignSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Iwan.Server.Domain.Media.Image", "MainImage")
                        .WithMany()
                        .HasForeignKey("MainImageId");

                    b.HasOne("Iwan.Server.Domain.Media.Image", "MobileImage")
                        .WithMany()
                        .HasForeignKey("MobileImageId");

                    b.Navigation("InteriorDesignSection");

                    b.Navigation("MainImage");

                    b.Navigation("MobileImage");
                });

            modelBuilder.Entity("Iwan.Server.Domain.Products.Product", b =>
                {
                    b.HasOne("Iwan.Server.Domain.Vendors.Vendor", "Vendor")
                        .WithMany("Products")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Iwan.Server.Domain.Products.ProductCategory", b =>
                {
                    b.HasOne("Iwan.Server.Domain.Catelog.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Iwan.Server.Domain.Products.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Iwan.Server.Domain.Products.ProductImage", b =>
                {
                    b.HasOne("Iwan.Server.Domain.Media.Image", "CroppedImage")
                        .WithMany()
                        .HasForeignKey("CroppedImageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Iwan.Server.Domain.Media.Image", "MediumImage")
                        .WithMany()
                        .HasForeignKey("MediumImageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Iwan.Server.Domain.Media.Image", "MobileImage")
                        .WithMany()
                        .HasForeignKey("MobileImageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Iwan.Server.Domain.Products.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Iwan.Server.Domain.Media.Image", "SmallImage")
                        .WithMany()
                        .HasForeignKey("SmallImageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Iwan.Server.Domain.Media.Image", "ThumbnailImage")
                        .WithMany()
                        .HasForeignKey("ThumbnailImageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CroppedImage");

                    b.Navigation("MediumImage");

                    b.Navigation("MobileImage");

                    b.Navigation("Product");

                    b.Navigation("SmallImage");

                    b.Navigation("ThumbnailImage");
                });

            modelBuilder.Entity("Iwan.Server.Domain.Products.ProductMainImage", b =>
                {
                    b.HasOne("Iwan.Server.Domain.Media.Image", "BackgroundlessCroppedImage")
                        .WithMany()
                        .HasForeignKey("BackgroundlessCroppedImageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Iwan.Server.Domain.Media.Image", "BackgroundlessMediumImage")
                        .WithMany()
                        .HasForeignKey("BackgroundlessMediumImageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Iwan.Server.Domain.Media.Image", "BackgroundlessMobileImage")
                        .WithMany()
                        .HasForeignKey("BackgroundlessMobileImageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Iwan.Server.Domain.Media.Image", "BackgroundlessSmallImage")
                        .WithMany()
                        .HasForeignKey("BackgroundlessSmallImageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Iwan.Server.Domain.Media.Image", "BackgroundlessThumbnailImage")
                        .WithMany()
                        .HasForeignKey("BackgroundlessThumbnailImageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Iwan.Server.Domain.Products.Product", "Product")
                        .WithOne("MainImage")
                        .HasForeignKey("Iwan.Server.Domain.Products.ProductMainImage", "ProductId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("BackgroundlessCroppedImage");

                    b.Navigation("BackgroundlessMediumImage");

                    b.Navigation("BackgroundlessMobileImage");

                    b.Navigation("BackgroundlessSmallImage");

                    b.Navigation("BackgroundlessThumbnailImage");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Iwan.Server.Domain.Products.ProductState", b =>
                {
                    b.HasOne("Iwan.Server.Domain.Products.Product", "Product")
                        .WithMany("States")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Iwan.Server.Domain.Sales.BillItem", b =>
                {
                    b.HasOne("Iwan.Server.Domain.Sales.Bill", "Bill")
                        .WithMany("BillItems")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Iwan.Server.Domain.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Iwan.Server.Domain.Security.RefreshToken", b =>
                {
                    b.HasOne("Iwan.Server.Domain.Users.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Iwan.Server.Domain.Settings.WatermarkSettings", b =>
                {
                    b.HasOne("Iwan.Server.Domain.Media.Image", "WatermarkImage")
                        .WithMany()
                        .HasForeignKey("WatermarkImageId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("WatermarkImage");
                });

            modelBuilder.Entity("Iwan.Server.Domain.Sliders.SliderImage", b =>
                {
                    b.HasOne("Iwan.Server.Domain.Media.Image", "CroppedImage")
                        .WithMany()
                        .HasForeignKey("CroppedImageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Iwan.Server.Domain.Media.Image", "MediumImage")
                        .WithMany()
                        .HasForeignKey("MediumImageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Iwan.Server.Domain.Media.Image", "MobileImage")
                        .WithMany()
                        .HasForeignKey("MobileImageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CroppedImage");

                    b.Navigation("MediumImage");

                    b.Navigation("MobileImage");
                });

            modelBuilder.Entity("Iwan.Server.Domain.Vendors.Vendor", b =>
                {
                    b.HasOne("Iwan.Server.Domain.Common.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Iwan.Server.Domain.Users.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Iwan.Server.Domain.Users.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Iwan.Server.Domain.Users.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Iwan.Server.Domain.Users.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Iwan.Server.Domain.Catelog.Category", b =>
                {
                    b.Navigation("Image");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Iwan.Server.Domain.Compositions.Composition", b =>
                {
                    b.Navigation("Image");
                });

            modelBuilder.Entity("Iwan.Server.Domain.Pages.AboutUsSection", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("Iwan.Server.Domain.Pages.ColorPickingSection", b =>
                {
                    b.Navigation("Colors");
                });

            modelBuilder.Entity("Iwan.Server.Domain.Pages.InteriorDesignSection", b =>
                {
                    b.Navigation("Image");
                });

            modelBuilder.Entity("Iwan.Server.Domain.Products.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("MainImage");

                    b.Navigation("ProductCategories");

                    b.Navigation("States");
                });

            modelBuilder.Entity("Iwan.Server.Domain.Sales.Bill", b =>
                {
                    b.Navigation("BillItems");
                });

            modelBuilder.Entity("Iwan.Server.Domain.Vendors.Vendor", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
